#pragma checksum "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "910033b7529854dd85a2e05b82e35faa00521db6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tok_AddMultipleToks), @"mvc.1.0.view", @"/Views/Tok/AddMultipleToks.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Tok/AddMultipleToks.cshtml", typeof(AspNetCore.Views_Tok_AddMultipleToks))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\_ViewImports.cshtml"
using Tokkepedia;

#line default
#line hidden
#line 2 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\_ViewImports.cshtml"
using Tokkepedia.Models;

#line default
#line hidden
#line 3 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\_ViewImports.cshtml"
using Tokkepedia.Models.ViewModels;

#line default
#line hidden
#line 2 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"910033b7529854dd85a2e05b82e35faa00521db6", @"/Views/Tok/AddMultipleToks.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ba46829bbb239bf192093e3fc0bf62e1c59ba7bf", @"/Views/_ViewImports.cshtml")]
    public class Views_Tok_AddMultipleToks : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<AddMultipleToksViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/offcanvas.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("TokGroupTokstar"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/tokstar1.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("mr-2 rounded-circle"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("max-height:60px!important; max-width:60px!important; margin-left:0.5em!important; margin-right:0!important;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("Toks"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("TokGroupStrings"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("TokGroupDataString"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "AddMultipleToks", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/popper.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/holder.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("bg-light"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(58, 20, true);
            WriteLiteral("\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(78, 658, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "aa2ac98df7244e74bfc8a7e087650ffd", async() => {
                BeginContext(84, 343, true);
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">
    <meta name=""description"" content="""">
    <meta name=""author"" content="""">
    <link rel=""icon"" href=""../../../../favicon.ico"">
    <title>Checkout example for Bootstrap</title>
    <!-- Bootstrap core CSS -->
    ");
                EndContext();
                BeginContext(427, 75, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cbdd61a1ecaa40bd935a01f2b86a7657", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(502, 52, true);
                WriteLiteral("\r\n    <!-- Custom styles for this template -->\r\n    ");
                EndContext();
                BeginContext(554, 52, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5665d3daacf546e99c6066ad3ac955d8", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(606, 123, true);
                WriteLiteral("\r\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/handsontable/4.0.0/handsontable.min.css\" rel=\"stylesheet\" />\r\n\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(736, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(738, 16289, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de9ea2fe818e4e6293b31beb6ff3cbdd", async() => {
                BeginContext(761, 360, true);
                WriteLiteral(@"
    <div class=""container"">
        <div class=""py-5 text-center"">
            <h2>Add Multiple Toks</h2>
            <p class=""lead"">Add toks to the Tokkepedia knowledge base</p>
        </div>

        <ul class=""list-group col-md-8 mb-3"">
            <li class=""list-group-item d-flex justify-content-between lh-condensed"">
                <div>
");
                EndContext();
                BeginContext(1196, 415, true);
                WriteLiteral(@"                    <div class=""speech-bubble"">
                        <small id=""TokGroupDesc"" style=""color:white!important;"">
                            Remember, adding multiple Toks together has limitations:
                            <br/>
                            - No images<br />
                            - Must be in English<br />
                            - No Optional Fields<br/><br/>
");
                EndContext();
                BeginContext(1922, 102, true);
                WriteLiteral("                        </small>\r\n                    </div>\r\n                </div>\r\n                ");
                EndContext();
                BeginContext(2024, 227, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f30f76bde3dc4abab8b605b2e35687fc", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2251, 150, true);
                WriteLiteral("\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"col-md-12 order-md-1\">\r\n            <h4 class=\"mb-3\" id=\"json\">Enter Toks</h4>\r\n            ");
                EndContext();
                BeginContext(2401, 858, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "26f096f23b2841f7b62ac2e93629d9d1", async() => {
                    BeginContext(2495, 18, true);
                    WriteLiteral("\r\n                ");
                    EndContext();
                    BeginContext(2514, 23, false);
#line 52 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
           Write(Html.AntiForgeryToken());

#line default
#line hidden
                    EndContext();
                    BeginContext(2537, 18, true);
                    WriteLiteral("\r\n                ");
                    EndContext();
                    BeginContext(2555, 48, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c68155636f2d4d7190fd69ee4456bbc2", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_8.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
#line 53 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Toks);

#line default
#line hidden
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(2603, 18, true);
                    WriteLiteral("\r\n                ");
                    EndContext();
                    BeginContext(2621, 69, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8db67ef403c9424196b9d4d9077ec3a4", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_8.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
#line 54 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.TokGroupString);

#line default
#line hidden
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(2690, 18, true);
                    WriteLiteral("\r\n                ");
                    EndContext();
                    BeginContext(2708, 76, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "927a83ee345d41018c3dca112e5823d8", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_8.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
#line 55 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.TokGroupDataString);

#line default
#line hidden
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(2784, 468, true);
                    WriteLiteral(@"

                <div id=""example3"" class=""hot handsontable""></div>

                <br />
                <h5 class=""mb-3"" id=""lblCount"">0 toks found:</h5>
                <div id=""TokSection""></div>
                <br />
                <h5 class=""mb-3"" id=""lblErrors"">Errors:</h5>
                <div id=""ErrorSection""></div>
                <button class=""btn btn-primary btn-lg btn-block"" type=""submit"" id=""BtnSubmit"">Add Toks</button>
            ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                if (__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.RouteValues == null)
                {
                    throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-returnurl", "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper", "RouteValues"));
                }
                BeginWriteTagHelperAttribute();
#line 51 "C:\Users\bonqu\source\github\TokkepediaWeb\Tokkepedia\Views\Tok\AddMultipleToks.cshtml"
                                                        WriteLiteral(ViewData["ReturnUrl"]);

#line default
#line hidden
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.RouteValues["returnurl"] = __tagHelperStringValueBuffer;
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-returnurl", __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.RouteValues["returnurl"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3259, 533, true);
                WriteLiteral(@"
        </div>
        
    </div>


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src=""https://code.jquery.com/jquery-3.3.1.slim.min.js"" integrity=""sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"" crossorigin=""anonymous""></script>
    <script>window.jQuery || document.write('<script src=""../../../../assets/js/vendor/jquery-slim.min.js""><\/script>')</script>
    ");
                EndContext();
                BeginContext(3792, 42, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "660b9e735cc349269db8dddf7a78701f", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3834, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(3840, 45, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d24917321cc946e8b2f3b61335c71541", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3885, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(3891, 42, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "999d1dd110de44e1addc8716c1e1b52a", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3933, 13087, true);
                WriteLiteral(@"
    <script src=""https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js""></script>

    <script>
        document.addEventListener(""DOMContentLoaded"", function () {

            var
                data3 = [
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '");
                WriteLiteral(@"', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', '']
                ],
                container3 = document.getElementById('example3'),
                hot3;

            hot3 = new Handsontable(container3, {
                data: data3,
                startRows: 8,
                startCols: 5,
                width: 800,
                height: 300,
                colWidths: 125,
                rowHeights: 23,
                colHeaders: ['Tok Group', 'Tok Type', 'Category', ""Primary Field"", ""Secondary Field"", ""Detail 1"", ""Detail 2"", ""Detail 3"", ""Detail 4"", ""Detail 5""],
           ");
                WriteLiteral(@"     rowHeaders: true,
                afterChange: function () {
                    //Valid toks array to be sent to database
                    var validToks = [];

                    //Put Tok groups into usable object
                    var allGroups = JSON.parse($(""#TokGroupDataString"").val());

                    //Make all types lowercase
                    for (var i = 0; i < allGroups.length; ++i) {
                        allGroups[i].tok_group = allGroups[i].tok_group.toLowerCase();

                        for (var j = 0; j < allGroups[i].tok_types.length; ++j) {
                            allGroups[i].tok_types[j] = allGroups[i].tok_types[j].toLowerCase();
                        }
                    }

                    //var obj = $.grep(allGroups, function (obj) { return obj.tok_group.includes('Choices'); })[0];
                    //alert(JSON.stringify(obj));

                    var tmpData = JSON.stringify(data3); //JSON.parse
                    var arr = JS");
                WriteLiteral(@"ON.parse(tmpData);

                    var groupArr = $(""#TokGroupStrings"").val().toString().split('|');
                    //alert(groupArr[0]);

                    var tokCount = 0;
                    $(""#TokSection"").empty();
                    $(""#ErrorSection"").empty();
                    var errors = [];
                    for (var i = 0; i < 20; ++i) {

                        // Check if any errors need to be added to the list
                        var errorFound = false;
                        var text = arr[i][0].toString().toLowerCase();

                        //Tok Group Check
                        var invalidGroup = false;
                        if (!groupArr.includes(text) && arr[i][0].length > 0) {
                            errors.push(""Group on row "" + (i + 1) + "" is invalid"");
                            errorFound = true;
                            invalidGroup = true;


                            
                        }

                      ");
                WriteLiteral(@"  //Tok Type Check
                        //Only use when valid group
                        //Use .includes() for finding in a string array, use .find() for an object array
                        if (!invalidGroup && arr[i][0].length > 0 && arr[i][1].length > 0) {

                            //Find Group from cell text
                            var obj = allGroups.find(function (obj) { return obj.tok_group == text; });

                            //Check if type is in group
                            if (!obj.tok_types.includes(arr[i][1])) {
                                errors.push(""Type on row "" + (i + 1) + "" is not a valid type within the Tok Group"");
                                errorFound = true;
                            }

                            //Primary Field Length Check
                            if (arr[i][3].length > obj.primaryCharLimit) {
                                errors.push(""Primary Field on row "" + (i + 1) + "" is too long, must be "" + obj.primaryCh");
                WriteLiteral(@"arLimit + "" characters or less"");
                                errorFound = true;
                            }

                            //Secondary/Detail check
                            if (!obj.is_detail_based) {
                                if (arr[i][4].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Secondary Field on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                            }
                            else {
                                if (arr[i][5].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Detail 1 on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                                i");
                WriteLiteral(@"f (arr[i][6].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Detail 2 on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                                if (arr[i][7].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Detail 3 on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                                if (arr[i][8].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Detail 4 on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                            ");
                WriteLiteral(@"    if (arr[i][9].length > obj.secondaryCharLimit) { // No Details
                                    errors.push(""Detail 15 on row "" + (i + 1) + "" is too long, must be "" + obj.secondaryCharLimit + "" characters or less"");
                                    errorFound = true;
                                }
                            }
                        }

                        //Category check
                        if (arr[i][2].length > 50) {
                            errors.push(""Category on row "" + (i + 1) + "" is too long, must be 50 characters or less"");
                            errorFound = true;
                        }

                        if (!errorFound) {
                            //No errors need to be added to list, now how many valid toks are there?
                            if (arr[i][0].length > 0 && arr[i][1].length > 0 && arr[i][2].length > 0 && arr[i][3].length > 0) { //Primary fields

                                if (arr[i][4].length > 0 && a");
                WriteLiteral(@"rr[i][5].length == 0 && arr[i][6].length == 0 && arr[i][7].length == 0 && arr[i][8].length == 0 && arr[i][9].length == 0) { // No Details
                                    tokCount = tokCount + 1;

                                    var tokDataArray = [];
                                    for (var k = 0; k < 10; ++k) {
                                        tokDataArray.push(arr[i][k]);
                                    }
                                    validToks.push(tokDataArray);

                                    $(""#TokSection"").append('<small>Tok Group: ' + arr[i][0] + ' | Tok Type: ' + arr[i][1] + ' | Category: ' + arr[i][2] + ' | Primary Field: ' + arr[i][3] + ' | Secondary Field: ' + arr[i][4] + '</small><br/>');
                                }

                                if (arr[i][4].length == 0 && arr[i][5].length > 0 && arr[i][6].length > 0 && arr[i][7].length > 0) { //Has Details
                                    tokCount = tokCount + 1;

                   ");
                WriteLiteral(@"                 var tokDataArray = [];
                                    for (var k = 0; k < 10; ++k) {
                                        tokDataArray.push(arr[i][k]);
                                    }
                                    validToks.push(tokDataArray);

                                    $(""#TokSection"").append('<small>Tok Group: ' + arr[i][0] + ' | Tok Type: ' + arr[i][1] + ' | Category: ' + arr[i][2] + ' | Primary Field: ' + arr[i][3] + ' | Detail 1: ' + arr[i][5] + ' | Detail 2: ' + arr[i][6] + ' | Detail 3: ' + arr[i][7] + ' | Detail 4: ' + arr[i][8] + ' | Detail 5: ' + arr[i][9] + '</small><br/>');
                                }
                            }
                        }

                        //Category Column
                        //if (arr[i][2].length > 1) {
                        //    alert(""Category too long"");
                        //}

                    }
                    $(""#lblCount"").text(tokCount + "" toks detected:"");");
                WriteLiteral(@"

                    errors.forEach(function (err) {
                        $(""#ErrorSection"").append('<small>- ' + err + '</small><br/>');
                    });

                    if (errors.length == 0) {
                        $(""#ErrorSection"").append('<small>None, toks are good to go!</small><br/>');
                    }

                    if (tokCount > 0 && errors.length == 0) {
                        $(""#BtnSubmit"").prop(""disabled"", false);
                    }
                    else {
                        $(""#BtnSubmit"").prop(""disabled"", true);
                    }
                    

                    // now tmpData has a copy of data3 that can be manipulated
                    // without breaking the Handsontable data source object
                    $(""#Toks"").val(JSON.stringify(validToks)); //tmpData
                    //alert($(""#Toks"").val().toString());
                }
            });

            //hot3 = new Handsontable(container3, {
     ");
                WriteLiteral(@"       //    data: data3,
            //    rowHeaders: ['Tok Group', 'Tok Type', 'Category'],
            //    stretchH: 'all',
            //    afterChange: function () {
            //        var tmpData = JSON.stringify(data3); //JSON.parse
            //        // now tmpData has a copy of data3 that can be manipulated
            //        // without breaking the Handsontable data source object
            //        $(""#Toks"").val(tmpData);
            //        alert($(""#Toks"").val().toString());
            //    }
            //}); 

        });
    </script>

    <script>
        $(document).ready(function () { 
            $(""#BtnSubmit"").prop(""disabled"", true);

            
        });

        function arrayColumn(arr, n) {
            return arr.map(x => x[n]);
        }
    </script>

    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict';

            window");
                WriteLiteral(@".addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');

                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();</script>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(17027, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AddMultipleToksViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
